controller = <?php\n\nnamespace App\Http\Controllers;\n\nuse Illuminate\Http\Request;\nuse App\Models\UserManagement;\n\nclass UserManagementController extends Controller {\n\n\tpublic function index() {\n\t\t$users = UserManagement::all();\n\t\treturn view('users.index', compact('users'));\n\t}\n\n\tpublic function create() {\n\t\treturn view('users.create');\n\t}\n\n\tpublic function store(Request $request) {\n\t\t$validatedData = $request->validate(['username' => 'required|max:255|unique:users', 'email' => 'required|email|unique:users', 'password' => 'required|min:6', 'first_name' => 'required|max:255', 'last_name' => 'required|max:255', 'display_name' => 'max:255', 'user_registered' => 'date', 'user_status' => 'required|numeric', 'role' => 'required|in:admin,editor,author,contributor,subscriber', 'avatar' => 'nullable|image|mimes:jpeg,png,jpg,gif|max:2048']);\n\t\tif ($request->hasFile('avatar')) {\n\t\t\t$avatar = $request->file('avatar');\n\t\t\t$filename = time().'.'.$avatar->getClientOriginalExtension();\n\t\t\t$path = public_path('/uploads/avatars/');\n\t\t\t$avatar->move($path, $filename);\n\t\t\t$validatedData['avatar'] = $filename;\n\t\t}\n\t\t$user = UserManagement::create($validatedData);\n\t\treturn redirect()->route('users.show', $user->id);\n\t}\n\n\tpublic function show($id) {\n\t\t$user = UserManagement::findOrFail($id);\n\t\treturn view('users.show', compact('user'));\n\t}\n\n\tpublic function edit($id) {\n\t\t$user = UserManagement::findOrFail($id);\n\t\treturn view('users.edit', compact('user'));\n\t}\n\n\tpublic function update(Request $request, $id) {\n\t\t$user = UserManagement::findOrFail($id);\n\t\t$validatedData = $request->validate(['username' => 'required|max:255|unique:users,username,'.$id, 'email' => 'required|email|unique:users,email,'.$id, 'password' => 'nullable|min:6', 'first_name' => 'required|max:255', 'last_name' => 'required|max:255', 'display_name' => 'max:255', 'user_registered' => 'date', 'user_status' => 'required|numeric', 'role' => 'required|in:admin,editor,author,contributor,subscriber', 'avatar' => 'nullable|image|mimes:jpeg,png,jpg,gif|max:2048']);\n\t\tif ($request->hasFile('avatar')) {\n\t\t\t$avatar = $request->file('avatar');\n\t\t\t$filename = time().'.'.$avatar->getClientOriginalExtension();\n\t\t\t$path = public_path('/uploads/avatars/');\n\t\t\t$avatar->move($path, $filename);\n\t\t\t$validatedData['avatar'] = $filename;\n\t\t}\n\t\t$user->update($validatedData);\n\t\treturn redirect()->route('users.show', $user->id);\n\t}\n

view.index = @extends('layouts.app')\n\n@section('content')\n\t<div class="container">\n\t\t<h1>User Management</h1>\n\t\t<table class="table" id="users-table">\n\t\t\t<thead>\n\t\t\t\t<tr>\n\t\t\t\t\t<th>ID</th>\n\t\t\t\t\t<th>Username</th>\n\t\t\t\t\t<th>Email</th>\n\t\t\t\t\t<th>First Name</th>\n\t\t\t\t\t<th>Last Name</th>\n\t\t\t\t\t<th>Role</th>\n\t\t\t\t\t<th>Registered At</th>\n\t\t\t\t\t<th>Status</th>\n\t\t\t\t</tr>\n\t\t\t</thead>\n\t\t</table>\n\t</div>\n\t<script>\n\t\t$(function() {\n\t\t\t$('#users-table').DataTable({\n\t\t\t\tprocessing: true,\n\t\t\t\tserverSide: true,\n\t\t\t\tajax: '{{ route('users.index') }}',\n\t\t\t\tcolumns: [\n\t\t\t\t\t{ data: 'id', name: 'id' },\n\t\t\t\t\t{ data: 'username', name: 'username' },\n\t\t\t\t\t{ data: 'email', name: 'email' },\n\t\t\t\t\t{ data: 'first_name', name: 'first_name' },\n\t\t\t\t\t{ data: 'last_name', name: 'last_name' },\n\t\t\t\t\t{ data: 'role', name: 'role' },\n\t\t\t\t\t{ data: 'user_registered', name: 'user_registered' },\n\t\t\t\t\t{ data: 'user_status', name: 'user_status' }\n\t\t\t\t]\n\t\t\t});\n\t\t});\n\t</script>\n@endsection

view.create =
 
view.edit = 

model = <?php\n\nnamespace App\Models;\n\nuse Illuminate\Database\Eloquent\Model;\n\nclass UserManagement extends Model\n{\n\tprotected $table = 'users';\n\tprotected $fillable = ['username', 'email', 'password', 'first_name', 'last_name', 'display_name', 'user_registered', 'user_status', 'role', 'avatar'];\n\tprotected $hidden = ['password', 'remember_token'];\n\tprotected $casts = ['user_registered' => 'datetime', 'user_status' => 'integer'];\n}
migration = <?php\n\nuse Illuminate\Database\Migrations\Migration;\nuse Illuminate\Database\Schema\Blueprint;\nuse Illuminate\Support\Facades\Schema;\n\nclass CreateUserManagementsTable extends Migration\n{\n\t/**\n\t * Run the migrations.\n\t *\n\t * @return void\n\t */\n\tpublic function up()\n\t{\n\t\tSchema::create('user_managements', function (Blueprint $table) {\n\t\t\t$table->bigIncrements('ID');\n\t\t\t$table->string('username')->unique();\n\t\t\t$table->string('email')->unique();\n\t\t\t$table->string('password');\n\t\t\t$table->string('first_name');\n\t\t\t$table->string('last_name');\n\t\t\t$table->string('display_name')->nullable();\n\t\t\t$table->timestamp('user_registered')->nullable();\n\t\t\t$table->integer('user_status');\n\t\t\t$table->string('role');\n\t\t\t$table->string('avatar')->nullable();\n\t\t\t$table->rememberToken();\n\t\t\t$table->timestamps();\n\t\t});\n\t}\n\n\t/**\n\t * Reverse the migrations.\n\t *\n\t * @return void\n\t */\n\tpublic function down()\n\t{\n\t\tSchema::dropIfExists('user_managements');\n\t}\n}

route = Route::group(['prefix' => 'user-management', 'namespace' => 'App\Http\Controllers'], function () {\n\tRoute::get('/', 'UserManagementController@index')->name('user-management.index');\n\tRoute::get('/create', 'UserManagementController@create')->name('user-management.create');\n\tRoute::post('/', 'UserManagementController@store')->name('user-management.store');\n\tRoute::get('/{id}', 'UserManagementController@show')->name('user-management.show');\n\tRoute::get('/{id}/edit', 'UserManagementController@edit')->name('user-management.edit');\n\tRoute::put('/{id}', 'UserManagementController@update')->name('user-management.update');\n\tRoute::delete('/{id}', 'UserManagementController@destroy')->name('user-management.destroy');\n});

vue_view = <template>\n\t<div>\n\t\t<h1>User Management</h1>\n\t\t<table class="table" id="users-table">\n\t\t\t<thead>\n\t\t\t\t<tr>\n\t\t\t\t\t<th>ID</th>\n\t\t\t\t\t<th>Username</th>\n\t\t\t\t\t<th>Email</th>\n\t\t\t\t\t<th>First Name</th>\n\t\t\t\t\t<th>Last Name</th>\n\t\t\t\t\t<th>Role</th>\n\t\t\t\t\t<th>Registered At</th>\n\t\t\t\t\t<th>Status</th>\n\t\t\t\t</tr>\n\t\t\t</thead>\n\t\t\t<tbody>\n\t\t\t\t<tr v-for="user in users" :key="user.id">\n\t\t\t\t\t<td>{{ user.id }}</td>\n\t\t\t\t\t<td>{{ user.username }}</td>\n\t\t\t\t\t<td>{{ user.email }}</td>\n\t\t\t\t\t<td>{{ user.first_name }}</td>\n\t\t\t\t\t<td>{{ user.last_name }}</td>\n\t\t\t\t\t<td>{{ user.role }}</td>\n\t\t\t\t\t<td>{{ user.user_registered }}</td>\n\t\t\t\t\t<td>{{ user.user_status }}</td>\n\t\t\t\t</tr>\n\t\t\t</tbody>\n\t\t</table>\n\t</div>\n</template>\n\n<script>\nexport default {\n\tdata() {\n\t\treturn {\n\t\t\tusers: [],\n\t\t};\n\t},\n\tmounted() {\n\t\tthis.fetchUsers();\n\t},\n\tmethods: {\n\t\tfetchUsers() {\n\t\t\taxios.get('/api/users')\n\t\t\t\t.then(response => {\n\t\t\t\t\tthis.users = response.data;\n\t\t\t\t})\n\t\t\t\t.catch(error => {\n\t\t\t\t\tconsole.error(error);\n\t\t\t\t});\n\t\t},\n\t},\n};\n</script>
